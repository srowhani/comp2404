/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *   File:      PArray.cc
 *   Purpose:   Function implementations for collection class PArray
 *   Author:    Christine Laurendeau
 *   Date:      Jul. 21, 2014
 *   (c) 2014 Christine Laurendeau
 *       ALL RIGHTS RESERVED, DO NOT USE OR RE-POST WITHOUT PERMISSION
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

#include <iostream>
#include <string>

using namespace std;

#include "../lib/PArray.h"

PArray::PArray() : size(0), elements(new Queue()){}

PArray::PArray(const PArray &p) : size(p.size), elements(new Queue(p.elements)){}

PArray::~PArray() 
{
	delete elements;
}

int PArray::add(Pirate *pirate)
{
	elements->push(pirate);
	size++;
	return C_OK;
}
int PArray :: remove(int& id)
{
	if(elements->remove(id)){
		--size;
		return 1;
	}
	return 0;
}

Pirate* PArray::getWithId(int id)
{
	Node* temp = elements->find(id);
	return temp != 0 ? temp->data : 0;
}

Pirate* PArray::get(int index)
{
	return elements->get(index);
}

int PArray::getSize() { return size; }

